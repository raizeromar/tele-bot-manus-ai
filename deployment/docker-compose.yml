version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    restart: always
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ../backend
      dockerfile: ../deployment/Dockerfile.backend
    volumes:
      - ../backend:/app
      - static_files:/app/staticfiles
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn telegram_ai_agent.wsgi:application --bind 0.0.0.0:8000"
    restart: always

  # Celery Worker
  celery:
    build:
      context: ../backend
      dockerfile: ../deployment/Dockerfile.backend
    volumes:
      - ../backend:/app
    env_file:
      - ./.env
    depends_on:
      - backend
      - redis
    command: celery -A telegram_ai_agent worker -l INFO
    restart: always

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: ../backend
      dockerfile: ../deployment/Dockerfile.backend
    volumes:
      - ../backend:/app
    env_file:
      - ./.env
    depends_on:
      - backend
      - redis
    command: celery -A telegram_ai_agent beat -l INFO
    restart: always

  # Next.js Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: ../deployment/Dockerfile.frontend
    volumes:
      - ../frontend:/app
      - /app/node_modules
      - /app/.next
    env_file:
      - ./.env
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: always

  # Nginx for serving static files and routing
  nginx:
    image: nginx:1.23
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_files:/static
    depends_on:
      - backend
      - frontend
    restart: always

volumes:
  postgres_data:
  redis_data:
  static_files:
